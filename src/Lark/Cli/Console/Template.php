<?php
/**
 * Lark Framework
 *
 * @copyright Shay Anderson <https://www.shayanderson.com>
 * @license MIT License <https://github.com/shayanderson/lark-framework/blob/master/LICENSE.md>
 * @link <https://github.com/shayanderson/lark-framework>
*/
declare(strict_types=1);

namespace Lark\Cli\Console;

use Lark\Cli\Console;
use Lark\File;

/**
 * Console file templates
 *
 * @author Shay Anderson
 */
class Template
{
	/**
	 * Console template file contents getter
	 *
	 * @param string $path
	 * @return string
	 */
	private static function getConsoleTemplate(string $path): string
	{
		return (new File($path))->read();
	}

	/**
	 * Model template getter
	 *
	 * @param string|null $templatePath
	 * @param string $name
	 * @param string $namespace
	 * @param string $schemaPathRel
	 * @param ?string $dbString
	 * @return string
	 */
	public static function model(
		?string $templatePath,
		string $name,
		string $namespace,
		?string $schemaPathRel,
		?string $dbString
	): string
	{
		if (!$templatePath)
		{
			#todo set as Lark\Config value
			$templatePath = Console::getDir('template') . '/_console/model.tpl';
		}

		$template = self::getConsoleTemplate($templatePath);

		$db = $dbString ? "const DBS = '{$dbString}';" : 'const DBS = null;';
		$schemaStr = $schemaPathRel
			? "const SCHEMA = '{$schemaPathRel}';"
			: "const SCHEMA = null;";

		return str_replace([
			'{$NAMESPACE}',
			'{$NAME}',
			'{$CLASS}',
			'{$DBS}',
			'{$SCHEMA}',
		], [
			$namespace,
			$name,
			$name,
			$db,
			$schemaStr
		], $template);
	}

	/**
	 * Revision template getter
	 *
	 * @param string $revId
	 * @param string|null $modelClass
	 * @param array|null $schema
	 * @param bool $createCollection
	 * @return void
	 */
	public static function revision(
		string $revId,
		?string $modelClass,
		?array $schema,
		bool $createCollection = false
	): string
	{
		$schemaStr = $schemaUseStr = null;
		if ($schema)
		{
			$schemaUseStr = ' use($schema)';
			$schemaVarStr = var_export($schema, true);
			$schemaStr = <<<"SCHEMA"

use Lark\Schema;

\$schema = new Schema($schemaVarStr);

SCHEMA;
		}

		$paramStr = $modelClass ? "{$modelClass} \$model" : 'Lark\Database $db';
		$body = '// ...';

		if ($createCollection && $modelClass && $schema)
		{
			$body = <<<'BODY'
return $model->db()->create($schema);
BODY;
		}

		return <<<"OUT"
<?php

declare(strict_types=1);
{$schemaStr}
/**
 * Revision
 *
 * @id {$revId}
 */
return function ({$paramStr}){$schemaUseStr}: ?bool
{
	{$body}
};

OUT;
	}

	/**
	 * Route template getter
	 *
	 * @param string|null $templatePath
	 * @param string $basePath
	 * @param string|null $modelClass
	 * @return string
	 */
	public static function route(
		?string $templatePath,
		string $basePath,
		?string $modelClass
	): string
	{
		if (!$templatePath)
		{
			#todo set as Lark\Config value
			if ($modelClass)
			{
				$templatePath = Console::getDir('template') . '/_console/route-model.tpl';
			}
			else
			{
				$templatePath = Console::getDir('template') . '/_console/route.tpl';
			}
		}

		$template = self::getConsoleTemplate($templatePath);

		// model
		if ($modelClass)
		{
			return str_replace([
				'{$PATHBASE}',
				'{$CLASSMODEL}'
			], [
				$basePath,
				$modelClass
			], $template);
		}
		// no model
		else
		{
			return str_replace([
				'{$PATHBASE}'
			], [
				$basePath,
			], $template);
		}
	}

	/**
	 * Schema template getter
	 *
	 * @param string $name
	 * @param array $template
	 * @param string $templatePath
	 * @return string
	 */
	public static function schema(string $name, array $template, string $templatePath): string
	{
		$tplStr = var_export($template, true);
		return <<<"OUT"
<?php
/**
 * Schema file for "{$name}"
 *
 * WARNING: this file is auto-generated by Lark Console. Do not modify.
 * Any modifications should be made in the schema template file:
 * "{$templatePath}"
 */
return {$tplStr};

OUT;
	}
}
